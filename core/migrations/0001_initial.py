# Generated by Django 2.2.10 on 2020-06-24 10:21

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClosedDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('closed_dates', models.DateField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CurrentWindow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_window', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='CutoffTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cutoff', models.TimeField(default=datetime.time(9, 0))),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('price', models.DecimalField(decimal_places=2, max_digits=4)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('category', models.CharField(choices=[('HF', 'Hot Food'), ('CF', 'Cold Food'), ('S', 'Snacks'), ('F', 'Frozen'), ('D', 'Drink')], max_length=2)),
                ('slug', models.SlugField(default='', editable=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(default='media/images/no-image-available-icon-template-260nw-1036735678.jpg_xctPfVt.png', upload_to='media/images/')),
                ('maximum_quantity', models.IntegerField(default=10)),
                ('not_available', models.BooleanField(default=False)),
                ('variations_exist', models.BooleanField(default=False, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='ItemVariation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variation', models.CharField(max_length=12)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Price (if different from base price)')),
                ('image', models.ImageField(default='media/images/no-image-available-icon-template-260nw-1036735678.jpg_xctPfVt.png', upload_to='media/images/')),
                ('slug', models.SlugField(default='')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Item')),
            ],
            options={
                'unique_together': {('variation', 'price')},
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(default='', max_length=100)),
                ('lastname', models.CharField(default='', max_length=100)),
                ('user_email', models.CharField(default='', max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordered', models.BooleanField(default=False)),
                ('title', models.CharField(default='', max_length=20)),
                ('quantity', models.IntegerField(default=1)),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Item')),
                ('item_variations', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.ItemVariation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_code', models.CharField(blank=True, max_length=20, null=True)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('ordered', models.BooleanField(default=False)),
                ('pickup_date', models.DateField(default=datetime.date.today, verbose_name='Pickup Date')),
                ('break_choice', models.CharField(choices=[('T', 'Morning Tea'), ('L', 'Lunch')], default='T', max_length=20)),
                ('payment_option', models.CharField(choices=[('B', 'Pay with Card (Credit/Debit)'), ('C', 'Pay with Cash at Tuck Shop')], default='B', max_length=20)),
                ('order_total', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('items', models.ManyToManyField(related_name='orderitem', to='core.OrderItem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NetOrders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('net_item', models.ManyToManyField(related_name='netitems', to='core.OrderItem')),
            ],
            options={
                'verbose_name': 'Net Orders',
                'verbose_name_plural': 'Net Orders',
            },
        ),
    ]
